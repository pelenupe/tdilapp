version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tdil-app
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - EMAIL_SERVICE=${EMAIL_SERVICE}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - HELMET_ENABLED=true
      - COMPRESSION_ENABLED=true
      - TRUST_PROXY=true
    volumes:
      - app_uploads:/app/backend/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tdil-network

  db:
    image: postgres:15-alpine
    container_name: tdil-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tdil}
      - POSTGRES_USER=${POSTGRES_USER:-tdiluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tdiluser} -d ${POSTGRES_DB:-tdil}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tdil-network
    ports:
      - "5432:5432" # Remove this in production, only for development access

  nginx:
    image: nginx:alpine
    container_name: tdil-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - app
    networks:
      - tdil-network

  redis:
    image: redis:7-alpine
    container_name: tdil-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - tdil-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  tdil-network:
    driver: bridge
